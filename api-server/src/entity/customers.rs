//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "customers")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub customer_id: i32,
    pub first_name: String,
    pub last_name: String,
    pub registration_date: Option<DateTimeWithTimeZone>,
    #[sea_orm(unique)]
    pub user_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::addresses::Entity")]
    Addresses,
    #[sea_orm(has_many = "super::orders::Entity")]
    Orders,
    #[sea_orm(has_many = "super::payment_methods::Entity")]
    PaymentMethods,
    #[sea_orm(has_many = "super::reviews::Entity")]
    Reviews,
    #[sea_orm(has_many = "super::shopping_carts::Entity")]
    ShoppingCarts,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::addresses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Addresses.def()
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl Related<super::payment_methods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PaymentMethods.def()
    }
}

impl Related<super::reviews::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reviews.def()
    }
}

impl Related<super::shopping_carts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ShoppingCarts.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
